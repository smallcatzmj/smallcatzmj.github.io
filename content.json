{"meta":{"title":"smallcatzmj","subtitle":null,"description":null,"author":"ScZmj","url":"smallcatzmj.github.io/blog","root":"/blog/"},"pages":[{"title":"about","date":"2019-05-17T16:26:55.000Z","updated":"2019-05-17T16:27:17.629Z","comments":true,"path":"about/index.html","permalink":"smallcatzmj.github.io/blog/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-05-17T16:26:05.000Z","updated":"2019-05-17T16:26:40.397Z","comments":false,"path":"categories/index.html","permalink":"smallcatzmj.github.io/blog/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-05-17T16:24:24.000Z","updated":"2019-05-17T16:25:50.901Z","comments":false,"path":"tags/index.html","permalink":"smallcatzmj.github.io/blog/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"Maven多模块","slug":"maven多模块","date":"2020-09-07T08:20:03.557Z","updated":"2020-09-07T08:32:06.760Z","comments":true,"path":"2020/09/07/maven多模块/","link":"","permalink":"smallcatzmj.github.io/blog/2020/09/07/maven多模块/","excerpt":"","text":"SpringBoot + Maven多模块项目说明：在一个项目需要使用到Maven的多模块管理，在网上查阅了相关资料后记录一下。 开发环境：IDEA，SpringBoot，Maven 工程结构：父工程father ​ 子模块 dao (用于持久层) ​ 子模块 entity (实体类) ​ 子模块 service (处理业务逻辑) ​ 子模块 web (页面交互和传递数据，唯一有启动类的模块) ​ 关系： web依赖 service ，dao , entiry ​ service依赖 dao, entity ​ dao依赖 entity ​ entity 谁都不依赖 一.创建Maven多模块项目​ 1.先建立最高层的父工程 File→new→project 然后选择Spring Initializr 点击Next: ​ 2.父工程不需要导入相应的依赖，点击Next： 文件的目录结构： 删除src文件夹，留下一个空壳即可，开始创建子项目，然后右项目击→new→Module 还是选择Spring Initaializr然后下一步 service模块和entiry一样的创建，dao和web模块需要引入相应的依赖： 删除每个子模块中没用的文件,.mvn, .gitignore, dao.iml, mvnw, mvnw.cmd和Application启动项和resources目录的application.properties 干净的目录如下： 二.依赖关系1.父模块的pom.xml修改打包的方式jar为pom,build内容也需要替换，默认的spring-boot-plugin的方式，在后期打包会一直提示引入的依赖不存在,entity,dao,service的build部分删掉，pom.xml文件内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071 4.0.0 org.springframework.boot spring-boot-starter-parent 2.1.6.RELEASE com.zmj father 0.0.1-SNAPSHOT pom father Demo project for Spring Boot UTF-8 UTF-8 1.8 entity dao service web org.springframework.boot spring-boot-starter org.springframework.boot spring-boot-starter-test test org.apache.maven.plugins maven-compiler-plugin 3.1 ${java.version} ${java.version} org.apache.maven.plugins maven-surefire-plugin 2.19.1 true 2.entity的pom.xml的内容 1234567891011121314151617181920212223242526272829303132333435363738 4.0.0 com.zmj father 0.0.1-SNAPSHOT ../pom.xml com.zmj entity 0.0.1-SNAPSHOT jar entity Demo project for Spring Boot 1.8 org.springframework.boot spring-boot-starter org.springframework.boot spring-boot-starter-test test 3.dao中的pom.xml的内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 4.0.0 com.zmj father 0.0.1-SNAPSHOT ../pom.xml com.zmj dao 0.0.1-SNAPSHOT jar dao Demo project for Spring Boot 1.8 org.springframework.boot spring-boot-starter-data-redis org.mybatis.spring.boot mybatis-spring-boot-starter 2.0.1 mysql mysql-connector-java runtime org.springframework.boot spring-boot-starter-test test com.zmj entity 0.0.1-SNAPSHOT 4.service中的pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 4.0.0 com.zmj father 0.0.1-SNAPSHOT ../pom.xml com.zmj dao 0.0.1-SNAPSHOT jar dao Demo project for Spring Boot 1.8 org.springframework.boot spring-boot-starter-data-redis org.mybatis.spring.boot mybatis-spring-boot-starter 2.0.1 mysql mysql-connector-java runtime org.springframework.boot spring-boot-starter-test test com.zmj entity 0.0.1-SNAPSHOT 5.web中的xml内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091 4.0.0 com.zmj father 0.0.1-SNAPSHOT ../pom.xml com.zmj web 0.0.1-SNAPSHOT jar web Demo project for Spring Boot 1.8 org.springframework.boot spring-boot-starter-data-redis org.springframework.boot spring-boot-starter-web org.mybatis.spring.boot mybatis-spring-boot-starter 2.0.1 mysql mysql-connector-java runtime org.springframework.boot spring-boot-starter-test test com.zmj entity 0.0.1-SNAPSHOT com.zmj dao 0.0.1-SNAPSHOT com.zmj service 0.0.1-SNAPSHOT org.springframework.boot spring-boot-maven-plugin com.zmj.web.WebApplication ZIP repackage 三.打包 四.测试在相应的包下建立测试类： entity包下： 1234567package com.zmj.entity;public class EntityTest { public String showEntity(){ return \"我是entity!\"; }} dao包下： 12345678910package com.zmj.dao;import com.zmj.entity.EntityTest;public class DaoTest { public String showDao(){ EntityTest entityTest = new EntityTest(); return entityTest.showEntity() + \":我是Dao\"; }} service包下： 12345678910package com.zmj.service;import com.zmj.dao.DaoTest;public class ServiceTest { public String showservice(){ DaoTest daoTest = new DaoTest(); return daoTest.showDao()+\":我是Service！\"; }} web包下: 123456789101112131415package com.zmj.web;import com.zmj.service.ServiceTest;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping(\"test\")public class WebTest {@RequestMapping(\"showAll\") public String showAll(){ ServiceTest serviceTest = new ServiceTest(); return serviceTest.showservice()+\"我是web！\"; }} 123456789101112131415package com.zmj.web;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;@SpringBootApplicationpublic class WebApplication { public static void main(String[] args) { SpringApplication.run(WebApplication.class, args); }} 运行Springboot启动类运行项目，在地址栏输入/test/showAll： 运行成功！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Springboot","slug":"Springboot","permalink":"smallcatzmj.github.io/blog/categories/Springboot/"}],"tags":[]},{"title":"排序算法总结","slug":"数据结构","date":"2019-12-24T16:00:00.000Z","updated":"2019-12-27T13:36:09.649Z","comments":true,"path":"2019/12/25/数据结构/","link":"","permalink":"smallcatzmj.github.io/blog/2019/12/25/数据结构/","excerpt":"","text":"①冒泡排序123456789101112public static void bubbleSort(int[] arr){ //数组为空或只有一个元素，结束 if (arr == null || arr.length 0;end--){ for (int i = 0; i < end; i++) { if (arr[i] > arr[i + 1]) swap(arr,i,i+1); } }} ​ 时间复杂度O(n²),空间复杂度O(1) ②选择排序12345678910111213141516public static void selectSort(int[] arr){ //数组为空或只有一个元素，结束 if (arr == null || arr.length arr[j + 1]; j--) { swap(arr,j,j + 1); } }} ​ 时间复杂度O(n²),空间复杂度O(1) ④归并排序12345678910111213141516171819202122232425262728293031public static void mergeSort(int[] arr){ //数组中的元素数量小于等于1，直接返回 if (arr == null || arr.length { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"数据结构","slug":"数据结构","permalink":"smallcatzmj.github.io/blog/categories/数据结构/"}],"tags":[{"name":"算法","slug":"算法","permalink":"smallcatzmj.github.io/blog/tags/算法/"},{"name":"排序","slug":"排序","permalink":"smallcatzmj.github.io/blog/tags/排序/"}]},{"title":"我爱学算法","slug":"算法系列1","date":"2019-12-24T16:00:00.000Z","updated":"2019-12-27T13:37:06.236Z","comments":true,"path":"2019/12/25/算法系列1/","link":"","permalink":"smallcatzmj.github.io/blog/2019/12/25/算法系列1/","excerpt":"","text":"1.时间复杂度数据规模：1second之内解决问题： O(n^2)的算法可以处理大约10^4级别的数据 O(n)的算法可以处理大约10^8级别的数据 O(nlogn)的算法可以处理大约10^7级别的数据 因为从1一直加到10^8计算机的运行时间大约为0.4s,在1s以内。 O所表示的是代码执行的平均代码量的上界，前面通常会有一个常数，例如cO(2^n)，有的时候也指平均值。 O(logn)表示n经过几次除以一个常数的操作后，等于0 或者1等常数，如log10n = O(logn),n一直除以10直到变为1. 二分查找 log2n = O(logn) 可由数学式推导：logaN = logab * logbN，logab为一个常数。 特殊情况：时间复杂度O(sqrt(n))，素数的判断： 1234567boolean isPrime(int n){ for (int x = 2 ;x*x = 1 and b > 1 是常量，其表示的意义是n表示问题的规模，a表示递归的次数也就是生成的子问题数，b表示每次递归是原来的1/b之一个规模，f（n）表示分解和合并所要花费的时间之和。 解法：①当dlogb a时，时间复杂度为O(n^d) 2.数组中的问题①二分查找1234567891011121314151617181920/** * * @param arr 有序数组 * @param n 数组长度 * @param target 目标值 * @return 目标值的数组下标 */static int binarysearch(int arr[], int n,int target){ int l = 0; int r = n - 1; //在[l...r]之间寻找目标值 while (l = 0 && p2 >= 0){//遍历比较两个数组的值，直到一个数组遍历完 if (nums1[p1] >= nums2[p2]){ nums1[p] = nums1[p1]; p -- ; p1 --; }else { nums1[p] = nums2[p2]; p -- ; p2 --; } }while (p2 >= 0)//数组1优先遍历完，将数组2中的剩余值传入数组1 nums1[p--] = nums2[p2--];} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"算法","slug":"算法","permalink":"smallcatzmj.github.io/blog/categories/算法/"}],"tags":[{"name":"算法","slug":"算法","permalink":"smallcatzmj.github.io/blog/tags/算法/"},{"name":"数组","slug":"数组","permalink":"smallcatzmj.github.io/blog/tags/数组/"}]}]}