<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smallcatzmj</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-07T08:32:06.760Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ScZmj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven多模块</title>
    <link href="http://yoursite.com/2020/09/07/maven%E5%A4%9A%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/09/07/maven多模块/</id>
    <published>2020-09-07T08:20:03.557Z</published>
    <updated>2020-09-07T08:32:06.760Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3648366533,3064716389&fm=26&gp=0.jpg" alt="声之形"></p><a id="more"></a><h1 id="SpringBoot-Maven多模块项目"><a href="#SpringBoot-Maven多模块项目" class="headerlink" title="SpringBoot + Maven多模块项目"></a>SpringBoot + Maven多模块项目</h1><p>说明：在一个项目需要使用到Maven的多模块管理，在网上查阅了相关资料后记录一下。</p><p>开发环境：IDEA，SpringBoot，Maven</p><p>工程结构：父工程father</p><p>​                        子模块 dao    (用于持久层)</p><p>​                        子模块 entity    (实体类)</p><p>​                        子模块 service    (处理业务逻辑)</p><p>​                        子模块 web    (页面交互和传递数据，唯一有启动类的模块)</p><p>​    关系： web依赖 service ，dao , entiry</p><p>​                service依赖 dao, entity    </p><p>​                dao依赖 entity</p><p>​                entity 谁都不依赖</p><h2 id="一-创建Maven多模块项目"><a href="#一-创建Maven多模块项目" class="headerlink" title="一.创建Maven多模块项目"></a>一.创建Maven多模块项目</h2><p>​    1.先建立最高层的父工程     File→new→project 然后选择Spring Initializr   点击Next:</p><p><img src="https://s1.ax1x.com/2020/09/07/wuKoEF.png" alt="wuKoEF.png"></p><p>​    2.父工程不需要导入相应的依赖，点击Next：</p><p><img src="https://s1.ax1x.com/2020/09/07/wunSEQ.png" alt="wunSEQ.png"></p><p><img src="https://s1.ax1x.com/2020/09/07/wumju8.png" alt="wumju8.png"></p><p>文件的目录结构：</p><p><img src="https://s1.ax1x.com/2020/09/07/wumOjf.png" alt="wumOjf.png"></p><p>删除src文件夹，留下一个空壳即可，开始创建子项目，然后右项目击→new→Module 还是选择Spring Initaializr然后下一步</p><p><img src="https://s1.ax1x.com/2020/09/07/wumk0e.png" alt="wumk0e.png"></p><p>service模块和entiry一样的创建，dao和web模块需要引入相应的依赖：</p><p><img src="https://s1.ax1x.com/2020/09/07/wumq3t.png" alt="wumq3t.png"></p><p><img src="https://s1.ax1x.com/2020/09/07/wum74A.png" alt="wum74A.png"></p><p>删除每个子模块中没用的文件,.mvn, .gitignore, dao.iml, mvnw, mvnw.cmd和Application启动项和resources目录的application.properties</p><p>干净的目录如下：</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\1562594934103.png" alt="1562594934103"></p><h2 id="二-依赖关系"><a href="#二-依赖关系" class="headerlink" title="二.依赖关系"></a>二.依赖关系</h2><p>1.父模块的pom.xml修改打包的方式jar为pom,build内容也需要替换，默认的spring-boot-plugin的方式，在后期打包会一直提示引入的依赖不存在,entity,dao,service的build部分删掉，pom.xml文件内容如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?></span><br><span class="line"><project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span><br><span class="line">    <modelVersion>4.0.0</modelVersion></span><br><span class="line">    <parent></span><br><span class="line">        <groupId>org.springframework.boot</groupId></span><br><span class="line">        <artifactId>spring-boot-starter-parent</artifactId></span><br><span class="line">        <version>2.1.6.RELEASE</version></span><br><span class="line">        <relativePath/> <!-- lookup parent from repository --></span><br><span class="line">    </parent></span><br><span class="line">    <groupId>com.zmj</groupId></span><br><span class="line">    <artifactId>father</artifactId></span><br><span class="line">    <version>0.0.1-SNAPSHOT</version></span><br><span class="line">    <!--修改打包方式为pom--></span><br><span class="line">    <packaging>pom</packaging></span><br><span class="line"></span><br><span class="line">    <name>father</name></span><br><span class="line">    <description>Demo project for Spring Boot</description></span><br><span class="line"></span><br><span class="line">    <!--设置编码--></span><br><span class="line">    <properties></span><br><span class="line">        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding></span><br><span class="line">        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding></span><br><span class="line">        <java.version>1.8</java.version></span><br><span class="line">    </properties></span><br><span class="line"></span><br><span class="line">    <!--其他的四个模块声明--></span><br><span class="line">    <modules></span><br><span class="line">        <module>entity</module></span><br><span class="line">        <module>dao</module></span><br><span class="line">        <module>service</module></span><br><span class="line">        <module>web</module></span><br><span class="line">    </modules></span><br><span class="line"></span><br><span class="line">    <dependencies></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter</artifactId></span><br><span class="line">        </dependency></span><br><span class="line"></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-test</artifactId></span><br><span class="line">            <scope>test</scope></span><br><span class="line">        </dependency></span><br><span class="line">    </dependencies></span><br><span class="line"></span><br><span class="line">    <!--build打包方式替换--></span><br><span class="line">    <build></span><br><span class="line">        <plugins></span><br><span class="line">            <plugin></span><br><span class="line">                <groupId>org.apache.maven.plugins</groupId></span><br><span class="line">                <artifactId>maven-compiler-plugin</artifactId></span><br><span class="line">                <version>3.1</version></span><br><span class="line">                <configuration></span><br><span class="line">                    <source>${java.version}</source></span><br><span class="line">                    <target>${java.version}</target></span><br><span class="line">                </configuration></span><br><span class="line">            </plugin></span><br><span class="line">            <plugin></span><br><span class="line">                <groupId>org.apache.maven.plugins</groupId></span><br><span class="line">                <artifactId>maven-surefire-plugin</artifactId></span><br><span class="line">                <version>2.19.1</version></span><br><span class="line">                <configuration></span><br><span class="line">                    <skipTests>true</skipTests>    <!--默认关掉单元测试 --></span><br><span class="line">                </configuration></span><br><span class="line">            </plugin></span><br><span class="line">        </plugins></span><br><span class="line">    </build></span><br><span class="line"></span><br><span class="line"></project></span><br></pre></td></tr></tbody></table></figure><p>2.entity的pom.xml的内容</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?></span><br><span class="line"><project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span><br><span class="line">    <modelVersion>4.0.0</modelVersion></span><br><span class="line">    <!--父模块的声明--></span><br><span class="line">    <parent></span><br><span class="line">        <groupId>com.zmj</groupId></span><br><span class="line">        <artifactId>father</artifactId></span><br><span class="line">        <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        <relativePath>../pom.xml</relativePath></span><br><span class="line">    </parent></span><br><span class="line"></span><br><span class="line">    <groupId>com.zmj</groupId></span><br><span class="line">    <artifactId>entity</artifactId></span><br><span class="line">    <version>0.0.1-SNAPSHOT</version></span><br><span class="line">    <!--打包的方式为jar--></span><br><span class="line">    <packaging>jar</packaging></span><br><span class="line">    <name>entity</name></span><br><span class="line">    <description>Demo project for Spring Boot</description></span><br><span class="line"></span><br><span class="line">    <properties></span><br><span class="line">        <java.version>1.8</java.version></span><br><span class="line">    </properties></span><br><span class="line"></span><br><span class="line">    <dependencies></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter</artifactId></span><br><span class="line">        </dependency></span><br><span class="line"></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-test</artifactId></span><br><span class="line">            <scope>test</scope></span><br><span class="line">        </dependency></span><br><span class="line">    </dependencies></span><br><span class="line"></span><br><span class="line"></project></span><br></pre></td></tr></tbody></table></figure><p>3.dao中的pom.xml的内容</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?></span><br><span class="line"><project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span><br><span class="line">    <modelVersion>4.0.0</modelVersion></span><br><span class="line">    <!--父模块声明--></span><br><span class="line">    <parent></span><br><span class="line">        <groupId>com.zmj</groupId></span><br><span class="line">        <artifactId>father</artifactId></span><br><span class="line">        <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        <relativePath>../pom.xml</relativePath></span><br><span class="line">    </parent></span><br><span class="line">    <groupId>com.zmj</groupId></span><br><span class="line">    <artifactId>dao</artifactId></span><br><span class="line">    <version>0.0.1-SNAPSHOT</version></span><br><span class="line"></span><br><span class="line">    <!--打包方式为jar--></span><br><span class="line">    <packaging>jar</packaging></span><br><span class="line">    <name>dao</name></span><br><span class="line">    <description>Demo project for Spring Boot</description></span><br><span class="line"></span><br><span class="line">    <properties></span><br><span class="line">        <java.version>1.8</java.version></span><br><span class="line">    </properties></span><br><span class="line"></span><br><span class="line">    <dependencies></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-data-redis</artifactId></span><br><span class="line">        </dependency></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.mybatis.spring.boot</groupId></span><br><span class="line">            <artifactId>mybatis-spring-boot-starter</artifactId></span><br><span class="line">            <version>2.0.1</version></span><br><span class="line">        </dependency></span><br><span class="line"></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>mysql</groupId></span><br><span class="line">            <artifactId>mysql-connector-java</artifactId></span><br><span class="line">            <scope>runtime</scope></span><br><span class="line">        </dependency></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-test</artifactId></span><br><span class="line">            <scope>test</scope></span><br><span class="line">        </dependency></span><br><span class="line">        <!--引入entity模块--></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>com.zmj</groupId></span><br><span class="line">            <artifactId>entity</artifactId></span><br><span class="line">            <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        </dependency></span><br><span class="line">    </dependencies></span><br><span class="line"></span><br><span class="line"></project></span><br></pre></td></tr></tbody></table></figure><p>4.service中的pom.xml</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?></span><br><span class="line"><project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span><br><span class="line">    <modelVersion>4.0.0</modelVersion></span><br><span class="line">    <!--父模块声明--></span><br><span class="line">    <parent></span><br><span class="line">        <groupId>com.zmj</groupId></span><br><span class="line">        <artifactId>father</artifactId></span><br><span class="line">        <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        <relativePath>../pom.xml</relativePath></span><br><span class="line">    </parent></span><br><span class="line">    <groupId>com.zmj</groupId></span><br><span class="line">    <artifactId>dao</artifactId></span><br><span class="line">    <version>0.0.1-SNAPSHOT</version></span><br><span class="line"></span><br><span class="line">    <!--打包方式为jar--></span><br><span class="line">    <packaging>jar</packaging></span><br><span class="line">    <name>dao</name></span><br><span class="line">    <description>Demo project for Spring Boot</description></span><br><span class="line"></span><br><span class="line">    <properties></span><br><span class="line">        <java.version>1.8</java.version></span><br><span class="line">    </properties></span><br><span class="line"></span><br><span class="line">    <dependencies></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-data-redis</artifactId></span><br><span class="line">        </dependency></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.mybatis.spring.boot</groupId></span><br><span class="line">            <artifactId>mybatis-spring-boot-starter</artifactId></span><br><span class="line">            <version>2.0.1</version></span><br><span class="line">        </dependency></span><br><span class="line"></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>mysql</groupId></span><br><span class="line">            <artifactId>mysql-connector-java</artifactId></span><br><span class="line">            <scope>runtime</scope></span><br><span class="line">        </dependency></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-test</artifactId></span><br><span class="line">            <scope>test</scope></span><br><span class="line">        </dependency></span><br><span class="line">        <!--引入entity模块--></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>com.zmj</groupId></span><br><span class="line">            <artifactId>entity</artifactId></span><br><span class="line">            <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        </dependency></span><br><span class="line">    </dependencies></span><br><span class="line"></span><br><span class="line"></project></span><br></pre></td></tr></tbody></table></figure><p>5.web中的xml内容</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?></span><br><span class="line"><project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span><br><span class="line">    <modelVersion>4.0.0</modelVersion></span><br><span class="line">    <!--父模块声明--></span><br><span class="line">    <parent></span><br><span class="line">        <groupId>com.zmj</groupId></span><br><span class="line">        <artifactId>father</artifactId></span><br><span class="line">        <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        <relativePath>../pom.xml</relativePath></span><br><span class="line">    </parent></span><br><span class="line">    <groupId>com.zmj</groupId></span><br><span class="line">    <artifactId>web</artifactId></span><br><span class="line">    <version>0.0.1-SNAPSHOT</version></span><br><span class="line"></span><br><span class="line">    <!--打包方式为jar--></span><br><span class="line">    <packaging>jar</packaging></span><br><span class="line">    <name>web</name></span><br><span class="line">    <description>Demo project for Spring Boot</description></span><br><span class="line"></span><br><span class="line">    <properties></span><br><span class="line">        <java.version>1.8</java.version></span><br><span class="line">    </properties></span><br><span class="line"></span><br><span class="line">    <dependencies></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-data-redis</artifactId></span><br><span class="line">        </dependency></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-web</artifactId></span><br><span class="line">        </dependency></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.mybatis.spring.boot</groupId></span><br><span class="line">            <artifactId>mybatis-spring-boot-starter</artifactId></span><br><span class="line">            <version>2.0.1</version></span><br><span class="line">        </dependency></span><br><span class="line"></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>mysql</groupId></span><br><span class="line">            <artifactId>mysql-connector-java</artifactId></span><br><span class="line">            <scope>runtime</scope></span><br><span class="line">        </dependency></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>org.springframework.boot</groupId></span><br><span class="line">            <artifactId>spring-boot-starter-test</artifactId></span><br><span class="line">            <scope>test</scope></span><br><span class="line">        </dependency></span><br><span class="line">        <!--引入entity模块--></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>com.zmj</groupId></span><br><span class="line">            <artifactId>entity</artifactId></span><br><span class="line">            <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        </dependency></span><br><span class="line">        <!--引入dao模块--></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>com.zmj</groupId></span><br><span class="line">            <artifactId>dao</artifactId></span><br><span class="line">            <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        </dependency></span><br><span class="line">        <!--引入service模块--></span><br><span class="line">        <dependency></span><br><span class="line">            <groupId>com.zmj</groupId></span><br><span class="line">            <artifactId>service</artifactId></span><br><span class="line">            <version>0.0.1-SNAPSHOT</version></span><br><span class="line">        </dependency></span><br><span class="line">    </dependencies></span><br><span class="line"></span><br><span class="line">    <build></span><br><span class="line">        <plugins></span><br><span class="line">            <plugin></span><br><span class="line">                <groupId>org.springframework.boot</groupId></span><br><span class="line">                <artifactId>spring-boot-maven-plugin</artifactId></span><br><span class="line">                <configuration></span><br><span class="line">                    <!-- 指定该Main Class为全局的唯一入口 --></span><br><span class="line">                    <mainClass>com.zmj.web.WebApplication</mainClass></span><br><span class="line">                    <layout>ZIP</layout></span><br><span class="line">                </configuration></span><br><span class="line">                <executions></span><br><span class="line">                    <execution></span><br><span class="line">                        <goals></span><br><span class="line">                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中--></span><br><span class="line">                        </goals></span><br><span class="line">                    </execution></span><br><span class="line">                </executions></span><br><span class="line">            </plugin></span><br><span class="line">        </plugins></span><br><span class="line">    </build></span><br><span class="line"></span><br><span class="line"></project></span><br></pre></td></tr></tbody></table></figure><h2 id="三-打包"><a href="#三-打包" class="headerlink" title="三.打包"></a>三.打包</h2><p><img src="https://s1.ax1x.com/2020/09/07/wue5Yn.png" alt="wue5Yn.png"></p><h2 id="四-测试"><a href="#四-测试" class="headerlink" title="四.测试"></a>四.测试</h2><p>在相应的包下建立测试类：</p><p>entity包下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmj.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showEntity</span><span class="params">()</span></span>{</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"我是entity!"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>dao包下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmj.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zmj.entity.EntityTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showDao</span><span class="params">()</span></span>{</span><br><span class="line">        EntityTest entityTest = <span class="keyword">new</span> EntityTest();</span><br><span class="line">        <span class="keyword">return</span> entityTest.showEntity() + <span class="string">":我是Dao"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>service包下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zmj.dao.DaoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showservice</span><span class="params">()</span></span>{</span><br><span class="line">        DaoTest daoTest = <span class="keyword">new</span> DaoTest();</span><br><span class="line">        <span class="keyword">return</span>  daoTest.showDao()+<span class="string">":我是Service！"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>web包下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmj.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zmj.service.ServiceTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebTest</span> </span>{</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"showAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showAll</span><span class="params">()</span></span>{</span><br><span class="line">    ServiceTest serviceTest = <span class="keyword">new</span> ServiceTest();</span><br><span class="line">    <span class="keyword">return</span> serviceTest.showservice()+<span class="string">"我是web！"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmj.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(WebApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行Springboot启动类运行项目，在地址栏输入/test/showAll：</p><p><img src="https://s1.ax1x.com/2020/09/07/wulN9J.png" alt="wulN9J.png"></p><p>运行成功！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3648366533,3064716389&amp;fm=26&amp;gp=0.jpg&quot; alt=&quot;声之形&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Springboot" scheme="http://yoursite.com/categories/Springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法总结</title>
    <link href="http://yoursite.com/2019/12/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2019/12/25/数据结构/</id>
    <published>2019-12-24T16:00:00.000Z</published>
    <updated>2019-12-27T13:36:09.649Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3486904540,3232382385&fm=26&gp=0.jpg" alt="我想吃掉你的胰脏"></p><a id="more"></a><h2 id="①冒泡排序"><a href="#①冒泡排序" class="headerlink" title="①冒泡排序"></a>①冒泡排序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{    </span><br><span class="line">    <span class="comment">//数组为空或只有一个元素，结束    </span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length <= <span class="number">1</span>){        </span><br><span class="line">        <span class="keyword">return</span>;    </span><br><span class="line">    }    <span class="comment">//end为未排完序的最后一个数下标    </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> end = arr.length - <span class="number">1</span>;end > <span class="number">0</span>;end--){        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < end; i++) {            </span><br><span class="line">            <span class="keyword">if</span> (arr[i] > arr[i + <span class="number">1</span>])                </span><br><span class="line">                swap(arr,i,i+<span class="number">1</span>);        </span><br><span class="line">        }    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​            时间复杂度O(n²),空间复杂度O(1)</p><h2 id="②选择排序"><a href="#②选择排序" class="headerlink" title="②选择排序"></a>②选择排序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">    <span class="comment">//数组为空或只有一个元素，结束</span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length <= <span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < arr.length - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="comment">//minindex记录最小的数下标</span></span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j < arr.length; j++) {</span><br><span class="line">            <span class="keyword">if</span> (arr[j] < arr[minIndex]){ </span><br><span class="line">                minIndex = j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        swap(arr,minIndex,j);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​            时间复杂度O(n²),空间复杂度O(1)</p><h2 id="③插入排序"><a href="#③插入排序" class="headerlink" title="③插入排序"></a>③插入排序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">    <span class="comment">//数组为空或只有一个元素，结束</span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length <= <span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//i为待插入数下标，j为待比较的数下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < arr.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j >= <span class="number">0</span> && arr[j] > arr[j + <span class="number">1</span>]; j--) {</span><br><span class="line">            swap(arr,j,j + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​            时间复杂度O(n²),空间复杂度O(1)</p><h2 id="④归并排序"><a href="#④归并排序" class="headerlink" title="④归并排序"></a>④归并排序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">      <span class="comment">//数组中的元素数量小于等于1，直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length  <= <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      sortProcess(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortProcess</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>{</span><br><span class="line">      <span class="keyword">int</span> mid =(L + R) / <span class="number">2</span>;</span><br><span class="line">      sortProcess(arr,L,mid); <span class="comment">//左排</span></span><br><span class="line">      sortProcess(arr,mid + <span class="number">1</span>,R); <span class="comment">//右排</span></span><br><span class="line">      merge(arr,L,mid,R); <span class="comment">//合并</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> mid, <span class="keyword">int</span> R)</span></span>{</span><br><span class="line">      <span class="keyword">int</span>[] extra = <span class="keyword">new</span> <span class="keyword">int</span>[R - L + <span class="number">1</span>]; <span class="comment">//辅助数组</span></span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//辅助数组指针</span></span><br><span class="line">      <span class="keyword">int</span> p1 = L;</span><br><span class="line">      <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//左右有一方全部填入，结束循环</span></span><br><span class="line">      <span class="keyword">while</span> (p1 <= mid && p2 <= R){</span><br><span class="line">          extra[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span> (p1 <=  mid)</span><br><span class="line">          extra[i++] = arr[p1++];</span><br><span class="line">      <span class="keyword">while</span> (p2 <= R)</span><br><span class="line">          extra[i++] = arr[p2++];</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i < extra.length; i++) {</span><br><span class="line">          arr[L + i] = extra[i];  <span class="comment">//排完序后重新赋值给原数组</span></span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>​        时间复杂度O(n* logn),空间复杂度O(n)</p><p><strong>小和问题(逆序对问题)</strong>：在一个数组中，每一个元素左边比当前元素值小的元素值累加起来，叫做这个数组的小和<br> 例如：[2,3,4,1,5]<br> 2左边比2小的元素：无<br> 3左边比3小的元素：2<br> 4左边比4小的元素：2，3<br> 1左边比1小的元素：无<br> 5左边比5小的元素：2,3,4,1<br> 小和small_sum = 2 + 2 + 3 + 2 + 3 + 4 + 1 = 17</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">      <span class="comment">//数组中的元素数量小于等于1，直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length  <= <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      sortProcess(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回每次排序和合并产生的小和</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sortProcess</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>{</span><br><span class="line">      <span class="keyword">int</span> mid =(L + R) / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">return</span> sortProcess(arr,L,mid) + <span class="comment">//左排</span></span><br><span class="line">      sortProcess(arr,mid + <span class="number">1</span>,R) + <span class="comment">//右排</span></span><br><span class="line">      merge(arr,L,mid,R); <span class="comment">//合并</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> mid, <span class="keyword">int</span> R)</span></span>{</span><br><span class="line">      <span class="keyword">int</span>[] extra = <span class="keyword">new</span> <span class="keyword">int</span>[R - L + <span class="number">1</span>]; <span class="comment">//辅助数组</span></span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//辅助数组指针</span></span><br><span class="line">      <span class="keyword">int</span> p1 = L;</span><br><span class="line">      <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//左右有一方全部填入，结束循环</span></span><br><span class="line">      <span class="keyword">while</span> (p1 <= mid && p2 <= R){</span><br><span class="line">          sum += arr[p1] < arr[p2] ? arr[p1] * (R - p2 + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">          extra[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span> (p1 <=  mid)</span><br><span class="line">          extra[i++] = arr[p1++];</span><br><span class="line">      <span class="keyword">while</span> (p2 <= R)</span><br><span class="line">          extra[i++] = arr[p2++];</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i < extra.length; i++) {</span><br><span class="line">          arr[L + i] = extra[i];  <span class="comment">//排完序后重新赋值给原数组</span></span><br><span class="line">      }</span><br><span class="line">      returm sum;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h2 id="⑤快速排序"><a href="#⑤快速排序" class="headerlink" title="⑤快速排序"></a>⑤快速排序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">    quickSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (L < R){</span><br><span class="line">        <span class="comment">//随机取一个数和尾部的数交换</span></span><br><span class="line">        swap(arr,L+(<span class="keyword">int</span>)Math.random() * (R - L + <span class="number">1</span>) , R);</span><br><span class="line">        <span class="keyword">int</span>[] p = patition(arr,L,R);<span class="comment">//获取左右的边界{less,more}</span></span><br><span class="line">        quickSort(arr, L, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, p[<span class="number">1</span>] + <span class="number">1</span>, R);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] patition(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> L,<span class="keyword">int</span> R){</span><br><span class="line">    <span class="keyword">int</span> less = L - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> more = R;</span><br><span class="line">    <span class="keyword">while</span> (L < more){</span><br><span class="line">        <span class="keyword">if</span> (arr[L] > arr[R])</span><br><span class="line">            swap(arr,++less,L++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[L] < arr[R])</span><br><span class="line">            swap(arr,--more,L);</span><br><span class="line">        <span class="keyword">else</span> L++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//将大于目标数（最后一个数）的第一个数与目标数交换</span></span><br><span class="line">    swap(arr,more,R);</span><br><span class="line">    <span class="comment">//返回与目标数相同的前后下标</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{less + <span class="number">1</span>,more};</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​                        时间复杂度O(n* logn),空间复杂度O(logn)</p><p><strong>荷兰国旗问题</strong>：给定一个整数数组，给定一个值K，这个值在原数组中一定存在，要求把数组中小于K的元素放到数组的左边，大于K的元素放到数组的右边，等于K的元素放到数组的中间，最终返回一个整数数组，其中只有两个值，分别是等于K的数组部分的左右两个下标值。</p><p>例如，给定数组：[2, 3, 1, 9, 7, 6, 1, 4, 5]，给定一个值4，那么经过处理原数组可能得一种情况是：[2, 3, 1, 1, 4, 9, 7, 6, 5]，需要注意的是，小于4的部分不需要有序，大于4的部分也不需要有序，返回等于4部分的左右两个下标，即[4, 4]</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] patition(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> num){</span><br><span class="line">    <span class="keyword">int</span> less = L - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> more = R + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cur = L; <span class="comment">//当前数下标</span></span><br><span class="line">    <span class="keyword">while</span> (cur < more){</span><br><span class="line">        <span class="keyword">if</span> (arr[cur] < num)</span><br><span class="line">            swap(arr,++less,cur++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur > more)</span><br><span class="line">            swap(arr,--more,cur);</span><br><span class="line">        <span class="keyword">else</span> cur++;</span><br><span class="line">    }<span class="comment">//返回中间相同的数的数组下标</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{less + <span class="number">1</span>,more - <span class="number">1</span>};</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="⑥堆排序"><a href="#⑥堆排序" class="headerlink" title="⑥堆排序"></a>⑥堆排序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">      <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length <= <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < arr.length; i++) {</span><br><span class="line">          heapInsert(arr,i);</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">//每次堆底的最大值与堆顶交换，堆长度减一，重新形成堆</span></span><br><span class="line">      <span class="keyword">int</span> heapSize = arr.length;</span><br><span class="line">      swap(arr,<span class="number">0</span>,--heapSize);</span><br><span class="line">      <span class="keyword">while</span> (heapSize > <span class="number">0</span>){</span><br><span class="line">          heapify(arr,<span class="number">0</span>,heapSize);</span><br><span class="line">          swap(arr,<span class="number">0</span>,--heapSize);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//形成大根堆，index从0开始一个个加入堆</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span></span>{</span><br><span class="line">      <span class="comment">//当子节点大于父节点交换,往后继续比较</span></span><br><span class="line">      <span class="keyword">while</span> (arr[index] > arr[(index - <span class="number">1</span>) / <span class="number">2</span>]){</span><br><span class="line">          swap(arr,index,(index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">          index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//当堆形成后有节点改变，heapSize-->当前最大堆</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index, <span class="keyword">int</span> heapSize)</span></span>{</span><br><span class="line">      <span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//当前节点的左子节点</span></span><br><span class="line">      <span class="keyword">while</span> (left < heapSize){</span><br><span class="line">          <span class="comment">//比较左右子节点</span></span><br><span class="line">          <span class="keyword">int</span> largest =left + <span class="number">1</span> < heapSize &&</span><br><span class="line">                  arr[left] >  arr[left + <span class="number">1</span>] ? left : left + <span class="number">1</span>;</span><br><span class="line">          <span class="comment">//再与当前父节点比较</span></span><br><span class="line">          largest = arr[largest] > arr[index] ? largest : index;</span><br><span class="line">          <span class="keyword">if</span> (largest == index)</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          swap(arr, largest, index); <span class="comment">//lagest != index</span></span><br><span class="line">          index = largest;<span class="comment">//往上</span></span><br><span class="line">          left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>​            时间复杂度O(n* logn),空间复杂度O(1)</p><h2 id="⑦桶排序"><a href="#⑦桶排序" class="headerlink" title="⑦桶排序"></a>⑦桶排序</h2><p>非比较排序，先找出最大和最小的数，然后等分成相应的范围，将数一个个加入相应的范围中，排好序，再拿出来拼接回原数组。时间复杂度O(n),空间复杂度O(n)。</p><p>计数排序：假如有数组【1，4，6，1，2，2，3，4】，max = 6,min = 1，分成6个桶值为每个数的数量【2，2，1，2，0，1】将数依次拿出然后合并返回给原数组。</p><p>最大差值问题：给定一个有序数组，求它们的最大差值。</p><p>例如：【1，4，7，9，10，15】的差值为【3，3，2，1，5】最大为5</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxGap</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> && nums.length <= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">//找到最大值和最小值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < len; i++) {</span><br><span class="line">        min = Math.min(min,nums[i]);</span><br><span class="line">        max = Math.max(max,nums[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//只有一个数返回0</span></span><br><span class="line">    <span class="keyword">if</span> (max == min)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//n个数设置n+1个空桶</span></span><br><span class="line">    <span class="keyword">boolean</span>[] hasNum = <span class="keyword">new</span> <span class="keyword">boolean</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>[] maxs = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>[] mins = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> bid = <span class="number">0</span>;<span class="comment">//桶遍历指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < len; i++) {</span><br><span class="line">        bid = bucket(nums[i], len, min, max);</span><br><span class="line">        System.out.println(bid);</span><br><span class="line">        mins[bid] = hasNum[bid] ? Math.min(mins[bid],nums[i]) : nums[i];</span><br><span class="line">        maxs[bid] = hasNum[bid] ? Math.max(maxs[bid],nums[i]) : nums[i];</span><br><span class="line">        System.out.println(mins[bid]+<span class="string">"--"</span>+maxs[bid]);</span><br><span class="line">        hasNum[bid] =  <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">//最大差值</span></span><br><span class="line">    <span class="keyword">int</span> lastMax = maxs[<span class="number">0</span>]; <span class="comment">//上一个桶的最大值</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//这里i < len + 1,因为桶比数要多一</span></span><br><span class="line">    <span class="keyword">for</span> (; i < len + <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (hasNum[i]){</span><br><span class="line">            res = Math.max(res,mins[i] - lastMax);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">            lastMax = maxs[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//定义那个桶应该去的桶号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bucket</span> <span class="params">(<span class="keyword">long</span> num,<span class="keyword">long</span> len,<span class="keyword">long</span> min,<span class="keyword">long</span> max)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) ((num  - min) * len / (max - min));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="排序对数器"><a href="#排序对数器" class="headerlink" title="排序对数器"></a>排序对数器</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataComparison</span> </span>{</span><br><span class="line">    <span class="comment">//绝对正确排序方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rightMathod</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机样本产生器,size-->随机最大长度 value-->随机最大数值，可为负</span></span><br><span class="line">    <span class="comment">//Math.random() --> double [0,1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateRandomArray(<span class="keyword">int</span> size,<span class="keyword">int</span> value) {</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>)((size + <span class="number">1</span>) * Math.random())];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < arr.length; i++) {</span><br><span class="line">            arr[i] =(<span class="keyword">int</span>)((value + <span class="number">1</span>) * Math.random()) -</span><br><span class="line">                (<span class="keyword">int</span>)((value + <span class="number">1</span>) * Math.random());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//生成copy数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copyArray(<span class="keyword">int</span>[] arr){</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span>[] newarr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < arr.length; i++) {</span><br><span class="line">            newarr[i] = arr[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> newarr;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成结果对比</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEqual</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> ((arr1 == <span class="keyword">null</span> && arr2 != <span class="keyword">null</span>) || (arr1 != <span class="keyword">null</span> && arr2 == <span class="keyword">null</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr1 == <span class="keyword">null</span> && arr2 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr1.length != arr2.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < arr1.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (arr1[i] == arr2[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//测试次数</span></span><br><span class="line">        <span class="keyword">int</span> testTime = <span class="number">50000</span>;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr1 = generateRandomArray(size, value);</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = copyArray(arr1);</span><br><span class="line">        <span class="keyword">int</span>[] arr3 = copyArray(arr1);</span><br><span class="line">        <span class="comment">//待测试方法</span></span><br><span class="line">        InsertionSort.insertionSort(arr1);</span><br><span class="line">        rightMathod(arr2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < testTime; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!isEqual(arr1, arr2)) {</span><br><span class="line">                success = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j < arr3.length; j++) {</span><br><span class="line">                    System.out.println(arr3[i]);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(success ? <span class="string">"成功(●'◡'●)"</span> : <span class="string">"失败:("</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>补充：当数据量较小时可选择O(n²)的插入排序，常数量小。基本类型用快排，稳定性低。类类型用归并，稳定性高。 </p><h2 id="类类型比较器"><a href="#类类型比较器" class="headerlink" title="类类型比较器"></a>类类型比较器</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorImp</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>{</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> score)</span></span>{</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.score = score;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//实现比较器，返回负数，前一个排在前，正数则相反，相等就不变</span></span><br><span class="line">    <span class="comment">//id按升序排</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IdAscendingComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span><<span class="title">Student</span>> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> o1.id - o2.id;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//分数按逆序排</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreDescendingComparater</span> <span class="keyword">implements</span> <span class="title">Comparator</span><<span class="title">Student</span>></span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> o2.score - o1.score;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"A"</span>,<span class="number">2</span>,<span class="number">34</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"B"</span>,<span class="number">1</span>,<span class="number">36</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"C"</span>,<span class="number">3</span>,<span class="number">35</span>);</span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[]{s1,s2,s3};</span><br><span class="line">        Arrays.sort(students,<span class="keyword">new</span> IdAscendingComparator());</span><br><span class="line">        <span class="keyword">for</span> (Student s:students) {</span><br><span class="line">            System.out.println(<span class="string">"name:"</span>+s.name+<span class="string">",id:"</span>+s.id+<span class="string">",score:"</span>+s.score);</span><br><span class="line">            System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">        Arrays.sort(students,<span class="keyword">new</span> ScoreDescendingComparater());</span><br><span class="line">        <span class="keyword">for</span> (Student s:students) {</span><br><span class="line">            System.out.println(<span class="string">"name:"</span>+s.name+<span class="string">",id:"</span>+s.id+<span class="string">",score:"</span>+s.score);</span><br><span class="line">            System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3486904540,3232382385&amp;fm=26&amp;gp=0.jpg&quot; alt=&quot;我想吃掉你的胰脏&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>我爱学算法</title>
    <link href="http://yoursite.com/2019/12/25/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%971/"/>
    <id>http://yoursite.com/2019/12/25/算法系列1/</id>
    <published>2019-12-24T16:00:00.000Z</published>
    <updated>2019-12-27T13:37:06.236Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1577463334795&di=90f2baa245f6fbc2882d3a87cdb403fc&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fent%2Ftransform%2F184%2Fw630h354%2F20190826%2F7b72-icuacrz5535183.jpg" alt="天气之子"></p><a id="more"></a><h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h2><p>数据规模：1second之内解决问题：</p><p>O(n^2)的算法可以处理大约10^4级别的数据</p><p>O(n)的算法可以处理大约10^8级别的数据</p><p>O(nlogn)的算法可以处理大约10^7级别的数据</p><p>因为从1一直加到10^8计算机的运行时间大约为0.4s,在1s以内。</p><p>O所表示的是代码执行的平均代码量的上界，前面通常会有一个常数，例如cO(2^n)，有的时候也指平均值。</p><p>O(logn)表示n经过几次除以一个常数的操作后，等于0 或者1等常数，如log10n = O(logn),n一直除以10直到变为1.</p><p>二分查找 log2n =  O(logn) 可由数学式推导：logaN = logab * logbN，logab为一个常数。</p><p>特殊情况：时间复杂度O(sqrt(n))，素数的判断：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>{    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span> ;x*x <= n; x ++){        </span><br><span class="line">        <span class="keyword">if</span> (n % x == <span class="number">0</span>)            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>递归的复杂度求法，master公式：</p><p>T [n] = aT[n/b] + f (n)（直接记为T [n] = aT[n/b] + T (N^d)）</p><p>其中 a >= 1 and b > 1 是常量，其表示的意义是n表示问题的规模，a表示递归的次数也就是生成的子问题数，b表示每次递归是原来的1/b之一个规模，f（n）表示分解和合并所要花费的时间之和。</p><p>解法：<br>①当d<logb a时，时间复杂度为o(n^(logb a)) ②当d="logb" a时，时间复杂度为o((n^d)*logn) ③当d>logb a时，时间复杂度为O(n^d)</logb></p><hr><h2 id="2-数组中的问题"><a href="#2-数组中的问题" class="headerlink" title="2.数组中的问题"></a>2.数组中的问题</h2><h3 id="①二分查找"><a href="#①二分查找" class="headerlink" title="①二分查找"></a>①二分查找</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 有序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 数组长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标值的数组下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarysearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n,<span class="keyword">int</span> target)</span></span>{     </span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>; <span class="keyword">int</span> r = n - <span class="number">1</span>; <span class="comment">//在[l...r]之间寻找目标值     </span></span><br><span class="line">    <span class="keyword">while</span> (l <= r) {          <span class="comment">//l==r,目标依旧在此区间         </span></span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;         </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target)             </span><br><span class="line">            <span class="keyword">return</span> mid;         </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] < target)             </span><br><span class="line">            l = mid + <span class="number">1</span>;         </span><br><span class="line">        <span class="keyword">else</span>             </span><br><span class="line">            r = mid - <span class="number">1</span>;     </span><br><span class="line">    }     </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度复杂度为O(logn)</p><hr><h3 id="②移动0"><a href="#②移动0" class="headerlink" title="②移动0"></a>②移动0</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span> nums[])</span></span>{    </span><br><span class="line">    List<Integer> noZeroElements = <span class="keyword">new</span> ArrayList(); <span class="comment">//定义集合存放非0元素   </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < nums.length; i++) {        </span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>)            <span class="comment">//遍历数组若为非0数则将其加入集合</span></span><br><span class="line">            noZeroElements.add(nums[i]);    </span><br><span class="line">    }    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = noZeroElements.size(); j < nums.length; j++)            </span><br><span class="line">        noZeroElements.add(<span class="number">0</span>);       <span class="comment">//后续补0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < noZeroElements.size(); i++) {        </span><br><span class="line">        nums[i] = noZeroElements.get(i);    <span class="comment">//将集合中的值重新传回数组</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度为O(n),空间复杂度为O(n)</p><p>优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span> nums[])</span></span>{    <span class="comment">//从[0...k)都为非0元素    </span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">//定义一个从头开始的指针    </span></span><br><span class="line">    <span class="keyword">int</span> swap = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < nums.length; i++) {        </span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) {            </span><br><span class="line">            <span class="keyword">if</span> (k != i) {                </span><br><span class="line">                swap = nums[k];                </span><br><span class="line">                nums[k++] = nums[i];                </span><br><span class="line">                nums[i] = swap;            </span><br><span class="line">            }            </span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//i == k,防止自己交换自己                </span></span><br><span class="line">                k++;        </span><br><span class="line">        }    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="③移除元素"><a href="#③移除元素" class="headerlink" title="③移除元素"></a>③移除元素</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[0...k)都是非目标值val</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < nums.length; i++) {    </span><br><span class="line">    <span class="keyword">if</span> (nums[i] != val){ <span class="comment">//遍历数组若该数与目标数相等，则交换        </span></span><br><span class="line">        <span class="keyword">if</span> (i != k) {            </span><br><span class="line">            temp = nums[k];            </span><br><span class="line">            nums[k++] = nums[i];            </span><br><span class="line">            nums[i] = temp;        </span><br><span class="line">        }        </span><br><span class="line">        <span class="keyword">else</span>            </span><br><span class="line">            k++;    </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> k;<span class="comment">//k最后指在第一个目标元素</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="④删除数组中的重复项"><a href="#④删除数组中的重复项" class="headerlink" title="④删除数组中的重复项"></a>④删除数组中的重复项</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>{    </span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>)<span class="comment">//若数组为空直接返回0        </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>; <span class="comment">//[0...k)为不相同的元素    </span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">int</span> thenum = nums[<span class="number">0</span>];<span class="comment">//定义临时变量接收不同的元素第一次出现时的值    </span></span><br><span class="line">    <span class="comment">//数组和k指针的初始都从1开始，因为第一个值一定不重复    </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < nums.length; i++) {        </span><br><span class="line">        <span class="comment">//遍历数组，若出现不同的值就将直接往后排列赋值        </span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] != thenum){            </span><br><span class="line">        thenum = nums[i];<span class="comment">//出现新的数时赋值            </span></span><br><span class="line">        <span class="keyword">if</span> (i != k){            </span><br><span class="line">            nums[k++] = nums[i];<span class="comment">//这里直接赋值，不交换        </span></span><br><span class="line">        }<span class="keyword">else</span>              </span><br><span class="line">            k++;        </span><br><span class="line">    }    </span><br><span class="line">}    </span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="⑤删除数组中的重复项Ⅱ"><a href="#⑤删除数组中的重复项Ⅱ" class="headerlink" title="⑤删除数组中的重复项Ⅱ"></a>⑤删除数组中的重复项Ⅱ</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">1</span>; <span class="keyword">int</span> thenum = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//1表示还可以遇到该数一次，0表示不可以</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i < nums.length;i ++) {</span><br><span class="line"><span class="keyword">if</span>(nums[i] == thenum && flag == <span class="number">1</span>) {</span><br><span class="line">nums[k++] = nums[i]; </span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(nums[i] != thenum) {</span><br><span class="line">thenum = nums[i];</span><br><span class="line"><span class="keyword">if</span>(i != k) {</span><br><span class="line">nums[k++] = nums[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">k++;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="⑥颜色分类"><a href="#⑥颜色分类" class="headerlink" title="⑥颜色分类"></a>⑥颜色分类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span> nums[])</span></span>{    </span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;    </span><br><span class="line"><span class="keyword">int</span> zero = -<span class="number">1</span>; <span class="comment">//nums[0...zero] == 0    </span></span><br><span class="line"><span class="keyword">int</span> two = nums.length; <span class="comment">//nums[two...n-1] == 2    </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < two;) {        </span><br><span class="line"><span class="keyword">if</span> (nums[i] == <span class="number">1</span>)            </span><br><span class="line">i++;        </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">0</span>){            </span><br><span class="line">zero++;            </span><br><span class="line">temp = nums[zero];            </span><br><span class="line">nums[zero] = nums[i];            </span><br><span class="line">nums[i] = temp;            </span><br><span class="line">i++;        </span><br><span class="line">}        </span><br><span class="line"><span class="keyword">else</span>{<span class="comment">//若该数为2，将前面换过来的数进行原地判断            </span></span><br><span class="line">two--;            </span><br><span class="line">temp = nums[two];            </span><br><span class="line">nums[two] = nums[i];            </span><br><span class="line">nums[i] = temp;        </span><br><span class="line">}    </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="⑦合并有序数组"><a href="#⑦合并有序数组" class="headerlink" title="⑦合并有序数组"></a>⑦合并有序数组</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1,<span class="keyword">int</span> m,<span class="keyword">int</span> nums2[],<span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> p1 = m - <span class="number">1</span>;  <span class="comment">//nums1[0...p1]为数组1待排列的数</span></span><br><span class="line"><span class="keyword">int</span> p2 = n - <span class="number">1</span>;  <span class="comment">//nums2[o...p2]为数组2待排列的数</span></span><br><span class="line"><span class="keyword">int</span> p = m + n - <span class="number">1</span>; <span class="comment">//p为数组1的尾指针</span></span><br><span class="line"><span class="keyword">while</span>(p1 >= <span class="number">0</span> && p2 >= <span class="number">0</span>){<span class="comment">//遍历比较两个数组的值，直到一个数组遍历完    </span></span><br><span class="line">    <span class="keyword">if</span> (nums1[p1] >= nums2[p2]){        </span><br><span class="line">        nums1[p] = nums1[p1];         </span><br><span class="line">        p -- ; p1 --;    </span><br><span class="line">    }<span class="keyword">else</span> {        </span><br><span class="line">        nums1[p] = nums2[p2];         </span><br><span class="line">        p -- ; p2 --;    </span><br><span class="line">    }</span><br><span class="line">}<span class="keyword">while</span> (p2 >= <span class="number">0</span>)<span class="comment">//数组1优先遍历完，将数组2中的剩余值传入数组1      </span></span><br><span class="line">    nums1[p--] = nums2[p2--];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1577463334795&amp;di=90f2baa245f6fbc2882d3a87cdb403fc&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fent%2Ftransform%2F184%2Fw630h354%2F20190826%2F7b72-icuacrz5535183.jpg&quot; alt=&quot;天气之子&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
